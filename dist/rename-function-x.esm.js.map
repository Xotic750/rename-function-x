{"version":3,"sources":["../src/rename-function-x.js"],"names":[],"mappings":"AAAA,OAAO,wBAAP,MAAqC,sCAArC;AACA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,cAAP,MAA2B,0BAA3B;AACA,OAAO,gBAAP,MAA6B,sBAA7B;AACA,OAAO,SAAP,MAAsB,aAAtB;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,SAAP,MAAsB,cAAtB;;AAEA,IAAM,MAAM,GAAG,SAAS,MAAT,CAAgB,EAAhB,EAAoB,IAApB,EAA0B;AACvC,MAAM,UAAU,GAAG,wBAAwB,CAAC,EAAD,EAAK,MAAL,CAA3C;;AAEA,MAAI,UAAU,IAAI,UAAU,CAAC,YAA7B,EAA2C;AACzC,IAAA,cAAc,CAAC,EAAD,EAAK,MAAL,EAAa;AAAC,MAAA,YAAY,EAAE,IAAf;AAAqB,MAAA,KAAK,EAAE;AAA5B,KAAb,CAAd;AACD;;AAED,SAAO,EAAE,CAAC,IAAV;AACD,CARD;;AAUA,OAAO,IAAM,wBAAwB,GACnC,OAAO,CAAC,SAAS,SAAT,GAAqB;AAC3B;AACA,SAAO,MAAM,CAAC,SAAS,KAAT,GAAiB,CAAE,CAApB,EAAsB,OAAtB,CAAb;AACD,CAHM,CAAP,CAGG,KAHH,KAGa,OAJR,C,CAMP;AACA;;AACA;;;;;;;;AAQA;;AACA,IAAM,cAAc,GAAG,SAAS,cAAT,CAAwB,EAAxB,EAA4B,IAA5B,EAAkC;AACvD,EAAA,gBAAgB,CAAC,EAAD,CAAhB;AACA,MAAM,MAAM,GAAG,KAAK,CAAC,IAAD,CAApB;AACA;;AACA,MAAM,KAAK,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,IAAwB,SAAS,CAAC,SAAS,CAAC,CAAD,CAAV,CAA/C;;AAEA,MAAI,KAAK,KAAK,KAAV,IAAmB,SAAS,CAAC,MAAD,CAAT,KAAsB,KAA7C,EAAoD;AAClD,UAAM,IAAI,KAAJ,uCAAwC,MAAxC,QAAN;AACD;;AAED,SAAO,wBAAwB,IAAI,MAAM,CAAC,EAAD,EAAK,IAAL,CAAN,KAAqB,MAAxD;AACD,CAXD;;AAaA,eAAe,cAAf","file":"rename-function-x.esm.js","sourcesContent":["import getOwnPropertyDescriptor from 'object-get-own-property-descriptor-x';\nimport attempt from 'attempt-x';\nimport defineProperty from 'object-define-property-x';\nimport assertIsFunction from 'assert-is-function-x';\nimport isVarName from 'is-var-name';\nimport toStr from 'to-string-x';\nimport toBoolean from 'to-boolean-x';\n\nconst rename = function rename(fn, name) {\n  const descriptor = getOwnPropertyDescriptor(fn, 'name');\n\n  if (descriptor && descriptor.configurable) {\n    defineProperty(fn, 'name', {configurable: true, value: name});\n  }\n\n  return fn.name;\n};\n\nexport const supportsFunctionRenaming =\n  attempt(function attemptee() {\n    /* eslint-disable-next-line lodash/prefer-noop */\n    return rename(function test1() {}, 'test2');\n  }).value === 'test2';\n\n// eslint-disable jsdoc/check-param-names\n// noinspection JSCommentMatchesSignature\n/**\n * Renames a function.\n *\n * @param {Function} fn - The function to be renamed.\n * @param {string} name - The new name for the function.\n * @param {boolean} [force=false] - Rename even if reported as not valid.\n * @returns {boolean} - Returns true if renaming was a success; otherwise false.\n */\n// eslint-enable jsdoc/check-param-names\nconst renameFunction = function renameFunction(fn, name) {\n  assertIsFunction(fn);\n  const string = toStr(name);\n  /* eslint-disable-next-line prefer-rest-params */\n  const force = arguments.length > 2 && toBoolean(arguments[2]);\n\n  if (force === false && isVarName(string) === false) {\n    throw new Error(`Not a valid function name \"${string}\"`);\n  }\n\n  return supportsFunctionRenaming && rename(fn, name) === string;\n};\n\nexport default renameFunction;\n"]}